version: '3.8'

services:
  # Main application
  leo-search-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: leo-search-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://leo_user:leo_password@postgres:5432/leo_search
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SECRET_KEY=your-secret-key-change-in-production
      - LOG_LEVEL=DEBUG
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./temp:/app/temp
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - leo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: leo-postgres
    environment:
      - POSTGRES_DB=leo_search
      - POSTGRES_USER=leo_user
      - POSTGRES_PASSWORD=leo_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - leo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U leo_user -d leo_search"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: leo-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - leo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: leo-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=leo-search-cluster
      - node.name=leo-search-node
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - leo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana (optional, for Elasticsearch management)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: leo-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - leo-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: leo-celery-worker
    command: celery -A src.core.celery_app worker --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://leo_user:leo_password@postgres:5432/leo_search
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SECRET_KEY=your-secret-key-change-in-production
      - LOG_LEVEL=DEBUG
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./temp:/app/temp
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - leo-network
    restart: unless-stopped
    profiles:
      - background

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: leo-celery-beat
    command: celery -A src.core.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://leo_user:leo_password@postgres:5432/leo_search
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SECRET_KEY=your-secret-key-change-in-production
      - LOG_LEVEL=DEBUG
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./temp:/app/temp
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - leo-network
    restart: unless-stopped
    profiles:
      - background

  # Flower for Celery monitoring
  flower:
    image: mher/flower:1.0
    container_name: leo-flower
    command: celery flower --broker=redis://:redis_password@redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - leo-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: leo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - leo-search-api
    networks:
      - leo-network
    restart: unless-stopped
    profiles:
      - production

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: leo-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - leo-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: leo-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - leo-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: leo-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - leo-network
    restart: unless-stopped
    profiles:
      - monitoring

  # MinIO for object storage (optional)
  minio:
    image: minio/minio:latest
    container_name: leo-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - leo-network
    restart: unless-stopped
    profiles:
      - storage

  # PostgreSQL backup service
  postgres-backup:
    image: prodrigestivill/postgres-backup-local
    container_name: leo-postgres-backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=leo_search
      - POSTGRES_USER=leo_user
      - POSTGRES_PASSWORD=leo_password
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=8080
    volumes:
      - ./backups:/backups
    depends_on:
      - postgres
    networks:
      - leo-network
    restart: unless-stopped
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

networks:
  leo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
